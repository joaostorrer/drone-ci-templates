---
{{ $first := true }}
{{ range $ambiente, $_ := .input.ambiente }}
{{ range $cliente, $vars := .cliente }}
{{ if not $first }}
---
{{ end }}
{{ $first = false }}
kind: pipeline
type: docker
name: {{ if eq $ambiente "homologacao" }}Homologação{{ else }}Produção{{ end }} ({{ $cliente }})

environment:
  {{ range $key, $value := .environment }}
  {{ if ne (printf "%T" $value) "map[interface {}]interface {}" }}
  {{ if eq (printf "%T" $value) "string" }}
  {{ $key }}: {{ printf "%q" $value }}
  {{ else }}
  {{ $key }}: {{ $value }}
  {{ end }}
  {{ end }}
  {{ end }}

steps:
{{ if eq $ambiente "homologacao" }}
- name: gitleaks
  image: plugins/gitleaks
  settings:
    path: .
{{ end }}

- name: db
  image: joaostorrer/sqitch-just-jinja2:latest
  pull: never
  environment:
    {{ range $key, $value := .environment }}
    {{ if eq (printf "%T" $value) "map[interface {}]interface {}" }}
    {{ range $k, $v := $value }}
    {{ if eq $k "from_secret" }}
    {{ $key }}:
      {{ $k }}: {{ $v }}
    {{ end }}
    {{ end }}
    {{ end }}
    {{ end }}
  commands:
  {{ if eq $ambiente "homologacao" }}
  - just db/valida_arquivos_verify
  {{ if eq $cliente "age" }}
  - just db/rebase {{ $cliente }}_teste
  {{ else }}
  - just db/deploy {{ $cliente }}_teste
  {{ end }}
  {{ else }}
  - just db/deploy {{ $cliente }}
  {{ end }}
  when:
    paths:
      include:
      - "db/**"
      - .drone.yml

- name: dialog
  image: joaostorrer/sqitch-just-jinja2:latest
  pull: never
  environment:
    {{ range $key, $value := .environment }}
    {{ if eq (printf "%T" $value) "map[interface {}]interface {}" }}
    {{ range $k, $v := $value }}
    {{ if eq $k "from_secret" }}
    {{ $key }}:
      {{ $k }}: {{ $v }}
    {{ end }}
    {{ end }}
    {{ end }}
    {{ end }}
  commands:
  - just dialog/deploy
  when:
    paths:
      include:
      - "dialog/**"
      - .drone.yml

- name: workflows
  image: joaostorrer/sqitch-just-jinja2:latest
  pull: never
  environment:
    {{ range $key, $value := .environment }}
    {{ if eq (printf "%T" $value) "map[interface {}]interface {}" }}
    {{ range $k, $v := $value }}
    {{ if eq $k "from_secret" }}
    {{ $key }}:
      {{ $k }}: {{ $v }}
    {{ end }}
    {{ end }}
    {{ end }}
    {{ end }}
  commands:
  - just workflows/deploy
  {{ if eq $ambiente "homologacao" }}- just workflows/rebase{{ end }}
  when:
    paths:
      include:
      - "workflows/**"
      - .drone.yml

trigger:
  branch:
  - {{ if eq $ambiente "homologacao" }}dev{{ else }}prod{{ end }}
  event:
    exclude:
    - tag
    - pull_request

{{ if ne $cliente "age" }}
depends_on:
- Homologação (age)
{{ end }}

{{ end }}

---

{{ if eq $ambiente "homologacao" }}
kind: pipeline
type: docker
name: Abrir Pull Request

steps:
- name: gerar token github app
  image: rssnyder/drone-github-app
  pull: if-not-exists
  settings:
    APP_ID:
      from_secret: GITHUB_APP_ID
    INSTALLATION:
      from_secret: GITHUB_INSTALLATION_ID
    PEM:
      from_secret: GITHUB_APP_PEM
    JSON_FILE: github_app.json

- name: pull request
  image: joaostorrer/sqitch-just-jinja2:latest
  pull: never
  commands:
  - GITHUB_TOKEN=$(jq -r '.token.token' github_app.json)
  - export EXISTE_PULL_REQUEST=$(curl -f -s -L -H "Accept:application/vnd.github+json" -H "Authorization:Bearer $GITHUB_TOKEN" -H "X-GitHub-Api-Version:2022-11-28" https://api.github.com/repos/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/pulls | jq 'length > 0')
  - if [ "$EXISTE_PULL_REQUEST" = false ]; then PULL_REQUEST_NUMBER=$(curl -f -L -X POST -H "Accept:application/vnd.github+json" -H "Authorization:Bearer $GITHUB_TOKEN" -H "X-GitHub-Api-Version:2022-11-28" "https://api.github.com/repos/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/pulls" -d '{"title":"Aplica ajustes na produção","body":"Merge dev into prod","head":"dev","base":"prod"}' | jq '.number'); fi
  - if [ "$EXISTE_PULL_REQUEST" = false ]; then curl -f -L -X POST -H "Accept:application/vnd.github+json" -H "Authorization:Bearer $GITHUB_TOKEN" -H "X-GitHub-Api-Version:2022-11-28" "https://api.github.com/repos/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/issues/$PULL_REQUEST_NUMBER/assignees" -d '{"assignees":["${DRONE_COMMIT_AUTHOR}"]}'; fi
  - if [ "$EXISTE_PULL_REQUEST" = false ]; then JSON_BODY=$(jq --null-input --arg REVISOR "$(printf '%s\n' 'joaostorrer' 'igorceranto' | grep -v '${DRONE_COMMIT_AUTHOR}')" '{"reviewers":[$REVISOR]}'); fi
  - if [ "$EXISTE_PULL_REQUEST" = false ]; then curl -f -L -X POST -H "Accept:application/vnd.github+json" -H "Authorization:Bearer $GITHUB_TOKEN" -H "X-GitHub-Api-Version:2022-11-28" "https://api.github.com/repos/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/pulls/$PULL_REQUEST_NUMBER/requested_reviewers" -d "$JSON_BODY"; fi

depends_on:
{{ range $cliente, $vars := .cliente }}
- Homologação ({{ $cliente }})
{{ end }}

trigger:
  branch:
  - {{ if eq $ambiente "homologacao" }}dev{{ else }}prod{{ end }}
  event:
    exclude:
    - tag
    - pull_request

{{ end }}
{{ end }}

kind: pipeline
type: docker
name: Gerar Release

steps:
- name: gerar token github app
  image: rssnyder/drone-github-app
  pull: if-not-exists
  settings:
    APP_ID:
      from_secret: GITHUB_APP_ID
    INSTALLATION:
      from_secret: GITHUB_INSTALLATION_ID
    PEM:
      from_secret: GITHUB_APP_PEM
    JSON_FILE: github_app.json

- name: gerar release
  image: joaostorrer/semantic-release
  commands:
  - export GITHUB_TOKEN=$(jq -r '.token.token' github_app.json)
  - semantic-release

{{ $first := true }}
{{ range $ambiente, $_ := .input.ambiente }}
{{ range $cliente, $vars := .cliente }}
{{ if eq $ambiente "producao" }}
{{ if $first }}
depends_on:
{{ $first = false }}
{{ end }}
- Produção ({{ $cliente }})
{{ end }}
{{ end }}
{{ end }}

trigger:
  branch:
  - prod
  event:
    exclude:
    - tag
    - pull_request
